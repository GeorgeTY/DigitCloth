# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from digitcloth/Edge_msg.msg. Do not edit."""
import codecs
import sys

python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Edge_msg(genpy.Message):
    _md5sum = "8e840a9c4afac1bb278e498fa78b07a6"
    _type = "digitcloth/Edge_msg"
    _has_header = False  # flag to mark the presence of a Header object
    _full_text = """bool isEdge
float32 p0
float32 p1
float32 p2
float32 p3"""
    __slots__ = ["isEdge", "p0", "p1", "p2", "p3"]
    _slot_types = ["bool", "float32", "float32", "float32", "float32"]

    def __init__(self, *args, **kwds):
        """
        Constructor. Any message fields that are implicitly/explicitly
        set to None will be assigned a default value. The recommend
        use is keyword arguments as this is more robust to future message
        changes.  You cannot mix in-order arguments and keyword arguments.

        The available fields are:
           isEdge,p0,p1,p2,p3

        :param args: complete set of field values, in .msg order
        :param kwds: use keyword arguments corresponding to message field names
        to set specific fields.
        """
        if args or kwds:
            super(Edge_msg, self).__init__(*args, **kwds)
            # message fields cannot be None, assign default values for those that are
            if self.isEdge is None:
                self.isEdge = False
            if self.p0 is None:
                self.p0 = 0.0
            if self.p1 is None:
                self.p1 = 0.0
            if self.p2 is None:
                self.p2 = 0.0
            if self.p3 is None:
                self.p3 = 0.0
        else:
            self.isEdge = False
            self.p0 = 0.0
            self.p1 = 0.0
            self.p2 = 0.0
            self.p3 = 0.0

    def _get_types(self):
        """
        internal API method
        """
        return self._slot_types

    def serialize(self, buff):
        """
        serialize message into buffer
        :param buff: buffer, ``StringIO``
        """
        try:
            _x = self
            buff.write(_get_struct_B4f().pack(_x.isEdge, _x.p0, _x.p1, _x.p2, _x.p3))
        except struct.error as se:
            self._check_types(
                struct.error(
                    "%s: '%s' when writing '%s'"
                    % (type(se), str(se), str(locals().get("_x", self)))
                )
            )
        except TypeError as te:
            self._check_types(
                ValueError(
                    "%s: '%s' when writing '%s'"
                    % (type(te), str(te), str(locals().get("_x", self)))
                )
            )

    def deserialize(self, str):
        """
        unpack serialized message in str into this message instance
        :param str: byte array of serialized message, ``str``
        """
        if python3:
            codecs.lookup_error("rosmsg").msg_type = self._type
        try:
            end = 0
            _x = self
            start = end
            end += 17
            (
                _x.isEdge,
                _x.p0,
                _x.p1,
                _x.p2,
                _x.p3,
            ) = _get_struct_B4f().unpack(str[start:end])
            self.isEdge = bool(self.isEdge)
            return self
        except struct.error as e:
            raise genpy.DeserializationError(e)  # most likely buffer underfill

    def serialize_numpy(self, buff, numpy):
        """
        serialize message with numpy array types into buffer
        :param buff: buffer, ``StringIO``
        :param numpy: numpy python module
        """
        try:
            _x = self
            buff.write(_get_struct_B4f().pack(_x.isEdge, _x.p0, _x.p1, _x.p2, _x.p3))
        except struct.error as se:
            self._check_types(
                struct.error(
                    "%s: '%s' when writing '%s'"
                    % (type(se), str(se), str(locals().get("_x", self)))
                )
            )
        except TypeError as te:
            self._check_types(
                ValueError(
                    "%s: '%s' when writing '%s'"
                    % (type(te), str(te), str(locals().get("_x", self)))
                )
            )

    def deserialize_numpy(self, str, numpy):
        """
        unpack serialized message in str into this message instance using numpy for array types
        :param str: byte array of serialized message, ``str``
        :param numpy: numpy python module
        """
        if python3:
            codecs.lookup_error("rosmsg").msg_type = self._type
        try:
            end = 0
            _x = self
            start = end
            end += 17
            (
                _x.isEdge,
                _x.p0,
                _x.p1,
                _x.p2,
                _x.p3,
            ) = _get_struct_B4f().unpack(str[start:end])
            self.isEdge = bool(self.isEdge)
            return self
        except struct.error as e:
            raise genpy.DeserializationError(e)  # most likely buffer underfill


_struct_I = genpy.struct_I


def _get_struct_I():
    global _struct_I
    return _struct_I


_struct_B4f = None


def _get_struct_B4f():
    global _struct_B4f
    if _struct_B4f is None:
        _struct_B4f = struct.Struct("<B4f")
    return _struct_B4f
